{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const login = async (email, password) => {\n  try {\n    const res = await axios.post(`http://localhost:5000/api/auth/login`, {\n      email,\n      password\n    });\n    localStorage.setItem('accessToken', res.data.accessToken);\n    localStorage.setItem('refreshToken', res.data.refreshToken);\n    localStorage.setItem('user', JSON.stringify(res.data.user)); // Ensure user data is stored as a string\n    return res.data.user;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Login failed');\n  }\n};\nexport const getUserInfo = () => {\n  const user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null; // Safely parse JSON\n};\nexport const logout = () => {\n  localStorage.removeItem('accessToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('user');\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","login","email","password","res","post","localStorage","setItem","data","accessToken","refreshToken","JSON","stringify","user","error","_error$response","_error$response$data","Error","response","getUserInfo","getItem","parse","logout","removeItem"],"sources":["D:/micro-auth/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nexport const login = async (email, password) => {\r\n  try {\r\n    const res = await axios.post(`http://localhost:5000/api/auth/login`, { email, password });\r\n    localStorage.setItem('accessToken', res.data.accessToken);\r\n    localStorage.setItem('refreshToken', res.data.refreshToken);\r\n    localStorage.setItem('user', JSON.stringify(res.data.user)); // Ensure user data is stored as a string\r\n    return res.data.user;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.error || 'Login failed');\r\n  }\r\n};\r\n\r\nexport const getUserInfo = () => {\r\n  const user = localStorage.getItem('user');\r\n  return user ? JSON.parse(user) : null; // Safely parse JSON\r\n};\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem('accessToken');\r\n  localStorage.removeItem('refreshToken');\r\n  localStorage.removeItem('user');\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,sCAAsC,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACzFG,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,GAAG,CAACI,IAAI,CAACC,WAAW,CAAC;IACzDH,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,GAAG,CAACI,IAAI,CAACE,YAAY,CAAC;IAC3DJ,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEI,IAAI,CAACC,SAAS,CAACR,GAAG,CAACI,IAAI,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7D,OAAOT,GAAG,CAACI,IAAI,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACd,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACI,QAAQ,cAAAH,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBP,IAAI,cAAAQ,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAI,cAAc,CAAC;EAChE;AACF,CAAC;AAED,OAAO,MAAMK,WAAW,GAAGA,CAAA,KAAM;EAC/B,MAAMN,IAAI,GAAGP,YAAY,CAACc,OAAO,CAAC,MAAM,CAAC;EACzC,OAAOP,IAAI,GAAGF,IAAI,CAACU,KAAK,CAACR,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AACzC,CAAC;AAED,OAAO,MAAMS,MAAM,GAAGA,CAAA,KAAM;EAC1BhB,YAAY,CAACiB,UAAU,CAAC,aAAa,CAAC;EACtCjB,YAAY,CAACiB,UAAU,CAAC,cAAc,CAAC;EACvCjB,YAAY,CAACiB,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}